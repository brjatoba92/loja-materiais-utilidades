#!/bin/bash

# üöÄ Script de Deploy Automatizado - Render Backend
# Autor: Sistema de Deploy
# Data: $(date)

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banner
echo -e "${BLUE}"
echo "=========================================="
echo "üöÄ DEPLOY AUTOMATIZADO - RENDER BACKEND"
echo "=========================================="
echo -e "${NC}"

# Verificar se est√° no diret√≥rio correto
if [ ! -d "backend" ]; then
    print_error "Diret√≥rio 'backend' n√£o encontrado!"
    print_status "Certifique-se de estar no diret√≥rio raiz do projeto"
    exit 1
fi

print_success "Diret√≥rio correto detectado"

# Verificar se os arquivos necess√°rios existem
print_status "Verificando arquivos necess√°rios..."

if [ ! -f "backend/package.json" ]; then
    print_error "package.json n√£o encontrado no backend!"
    exit 1
fi

if [ ! -f "backend/server.js" ]; then
    print_error "server.js n√£o encontrado no backend!"
    exit 1
fi

if [ ! -f "backend/render.yaml" ]; then
    print_error "render.yaml n√£o encontrado no backend!"
    exit 1
fi

if [ ! -f "backend/database/database-render.sql" ]; then
    print_error "database-render.sql n√£o encontrado!"
    exit 1
fi

print_success "Todos os arquivos necess√°rios encontrados"

# Verificar se o git est√° configurado
print_status "Verificando configura√ß√£o do Git..."
if ! git status &> /dev/null; then
    print_error "Git n√£o est√° configurado neste diret√≥rio!"
    exit 1
fi

print_success "Git configurado"

# Verificar se h√° mudan√ßas para commitar
print_status "Verificando mudan√ßas no Git..."
if ! git diff-index --quiet HEAD --; then
    print_warning "H√° mudan√ßas n√£o commitadas!"
    print_status "Fazendo commit das mudan√ßas..."
    
    git add .
    git commit -m "Deploy: Prepara√ß√£o para Render $(date)"
    print_success "Mudan√ßas commitadas"
else
    print_success "N√£o h√° mudan√ßas pendentes"
fi

# Verificar se o reposit√≥rio est√° no GitHub
print_status "Verificando reposit√≥rio remoto..."
if ! git remote get-url origin &> /dev/null; then
    print_error "Reposit√≥rio remoto n√£o configurado!"
    print_status "Configure o reposit√≥rio no GitHub primeiro"
    exit 1
fi

print_success "Reposit√≥rio remoto configurado"

# Fazer push para o GitHub
print_status "Fazendo push para o GitHub..."
git push origin main

if [ $? -eq 0 ]; then
    print_success "Push realizado com sucesso!"
else
    print_error "Erro ao fazer push!"
    exit 1
fi

echo -e "${BLUE}"
echo "=========================================="
echo "‚úÖ PREPARA√á√ÉO CONCLU√çDA!"
echo "=========================================="
echo -e "${NC}"

print_success "C√≥digo enviado para o GitHub!"
print_status "Agora siga os passos no Render:"

echo ""
echo "1. Acesse: https://render.com"
echo "2. Fa√ßa login com GitHub"
echo "3. Clique em 'New' ‚Üí 'Web Service'"
echo "4. Conecte seu reposit√≥rio: loja-materiais-utilidades"
echo "5. Configure:"
echo "   - Name: loja-utilidades-backend"
echo "   - Environment: Node"
echo "   - Root Directory: backend"
echo "   - Build Command: npm install"
echo "   - Start Command: node server.js"
echo "6. Clique em 'Create Web Service'"

print_status "Ap√≥s o deploy, configure o banco de dados:"
echo "1. Crie um PostgreSQL no Render"
echo "2. Execute o script: backend/database/database-render.sql"
echo "3. Configure as vari√°veis de ambiente"

print_status "Comandos √∫teis ap√≥s o deploy:"
echo "- Testar API: curl https://seu-app.onrender.com/api/health"
echo "- Ver logs: Render Dashboard ‚Üí Logs"
echo "- Ver m√©tricas: Render Dashboard ‚Üí Metrics"

print_success "Deploy automatizado conclu√≠do! üéâ"
print_warning "Lembre-se de configurar o banco de dados no Render Dashboard"
